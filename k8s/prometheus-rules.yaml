---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: descheduler-algorithms
  namespace: monitoring
  labels:
    prometheus: kube-prometheus
spec:
  groups:
    - name: descheduler.base.metrics
      interval: 15s
      rules:
        # Base node metrics - these are the raw inputs
        - record: descheduler:node:cpu_usage:ratio
          expr: node_cpu_usage_ratio

        - record: descheduler:node:cpu_pressure:psi
          expr: node_cpu_pressure_psi

        - record: descheduler:node:memory_usage:ratio
          expr: node_memory_usage_ratio

        - record: descheduler:node:memory_pressure:psi
          expr: node_memory_pressure_psi

        # Combined metric for descheduler LowNodeUtilization plugin
        # Average of CPU and memory metrics (both usage and pressure)
        # This is the metric the descheduler expects
        # Multiplied by 100 to convert to percentage (0-100 scale)
        # Rename 'node' label to 'instance' as descheduler expects
        - record: descheduler:combined_utilization_and_pressure:avg1m
          expr: |-
            label_replace(
              (
                node_cpu_usage_ratio +
                node_cpu_pressure_psi +
                node_memory_usage_ratio +
                node_memory_pressure_psi
              ) / 4 * 100,
              "instance", "$1", "node", "(.*)"
            )

    - name: descheduler.cluster.averages
      interval: 15s
      rules:
        # Cluster-wide averages (ideal point)
        - record: descheduler:cluster:cpu_usage:avg
          expr: avg(descheduler:node:cpu_usage:ratio)

        - record: descheduler:cluster:cpu_pressure:avg
          expr: avg(descheduler:node:cpu_pressure:psi)

        - record: descheduler:cluster:memory_usage:avg
          expr: avg(descheduler:node:memory_usage:ratio)

        - record: descheduler:cluster:memory_pressure:avg
          expr: avg(descheduler:node:memory_pressure:psi)

        # Standard deviations (useful for variance analysis)
        - record: descheduler:cluster:cpu_usage:stddev
          expr: stddev(descheduler:node:cpu_usage:ratio)

        - record: descheduler:cluster:memory_usage:stddev
          expr: stddev(descheduler:node:memory_usage:ratio)

    - name: descheduler.node.deviations
      interval: 15s
      rules:
        # Positive deviations from ideal point (cluster average)
        - record: descheduler:node:cpu_usage:positive_deviation
          expr: |-
            clamp_min(
              descheduler:node:cpu_usage:ratio - on() group_left() descheduler:cluster:cpu_usage:avg,
              0
            )

        - record: descheduler:node:cpu_pressure:positive_deviation
          expr: |-
            clamp_min(
              descheduler:node:cpu_pressure:psi - on() group_left() descheduler:cluster:cpu_pressure:avg,
              0
            )

        - record: descheduler:node:memory_usage:positive_deviation
          expr: |-
            clamp_min(
              descheduler:node:memory_usage:ratio - on() group_left() descheduler:cluster:memory_usage:avg,
              0
            )

        - record: descheduler:node:memory_pressure:positive_deviation
          expr: |-
            clamp_min(
              descheduler:node:memory_pressure:psi - on() group_left() descheduler:cluster:memory_pressure:avg,
              0
            )

    - name: descheduler.algorithms.simple
      interval: 15s
      rules:
        # Algorithm: Weighted Average
        # Simple weighted average of CPU and memory metrics
        - record: descheduler:node:weighted_average:score
          expr: |-
            (
              (descheduler:node:cpu_usage:ratio + descheduler:node:cpu_pressure:psi) / 2 * 0.5 +
              (descheduler:node:memory_usage:ratio + descheduler:node:memory_pressure:psi) / 2 * 0.5
            )

        # Algorithm: Max Metric
        # Approximation: average of top 2 values (simpler than true max in PromQL)
        - record: descheduler:node:max_metric:score
          expr: |-
            (
              descheduler:node:cpu_usage:ratio +
              descheduler:node:cpu_pressure:psi +
              descheduler:node:memory_usage:ratio +
              descheduler:node:memory_pressure:psi
            ) / 2 - (
              clamp_min(descheduler:node:cpu_usage:ratio, 0) +
              clamp_min(descheduler:node:cpu_pressure:psi, 0) +
              clamp_min(descheduler:node:memory_usage:ratio, 0) +
              clamp_min(descheduler:node:memory_pressure:psi, 0) -
              (descheduler:node:cpu_usage:ratio +
               descheduler:node:cpu_pressure:psi +
               descheduler:node:memory_usage:ratio +
               descheduler:node:memory_pressure:psi)
            ) / 2

        # Algorithm: CPU Focused
        # Weighted towards CPU metrics (75% CPU, 25% memory)
        - record: descheduler:node:cpu_focused:score
          expr: |-
            (
              (descheduler:node:cpu_usage:ratio + descheduler:node:cpu_pressure:psi) / 2 * 0.75 +
              (descheduler:node:memory_usage:ratio + descheduler:node:memory_pressure:psi) / 2 * 0.25
            )

        # Algorithm: Memory Focused
        # Weighted towards memory metrics (25% CPU, 75% memory)
        - record: descheduler:node:memory_focused:score
          expr: |-
            (
              (descheduler:node:cpu_usage:ratio + descheduler:node:cpu_pressure:psi) / 2 * 0.25 +
              (descheduler:node:memory_usage:ratio + descheduler:node:memory_pressure:psi) / 2 * 0.75
            )

        # Algorithm: Pressure Focused
        # Focuses only on pressure metrics
        - record: descheduler:node:pressure_focused:score
          expr: |-
            (descheduler:node:cpu_pressure:psi + descheduler:node:memory_pressure:psi) / 2

    - name: descheduler.algorithms.distance
      interval: 15s
      rules:
        # Algorithm: Euclidean Distance
        # Euclidean distance from origin (0,0,0,0)
        - record: descheduler:node:euclidean_distance:score
          expr: |-
            sqrt(
              descheduler:node:cpu_usage:ratio ^ 2 +
              descheduler:node:cpu_pressure:psi ^ 2 +
              descheduler:node:memory_usage:ratio ^ 2 +
              descheduler:node:memory_pressure:psi ^ 2
            )

        # Algorithm: Ideal Point Positive Distance
        # Euclidean distance from ideal point using only positive deviations
        - record: descheduler:node:ideal_point_positive_distance:score
          expr: |-
            sqrt(
              descheduler:node:cpu_usage:positive_deviation ^ 2 +
              descheduler:node:cpu_pressure:positive_deviation ^ 2 +
              descheduler:node:memory_usage:positive_deviation ^ 2 +
              descheduler:node:memory_pressure:positive_deviation ^ 2
            )

        # Algorithm: Linear Amplified Ideal Point Positive Distance (k=1.0)
        - record: descheduler:node:linear_amplified_ippd_k1:score
          expr: |-
            clamp_max(
              1.0 * descheduler:node:ideal_point_positive_distance:score,
              1.0
            )

        # Algorithm: Linear Amplified Ideal Point Positive Distance (k=3.0)
        - record: descheduler:node:linear_amplified_ippd_k3:score
          expr: |-
            clamp_max(
              3.0 * descheduler:node:ideal_point_positive_distance:score,
              1.0
            )

        # Algorithm: Linear Amplified Ideal Point Positive Distance (k=5.0)
        - record: descheduler:node:linear_amplified_ippd_k5:score
          expr: |-
            clamp_max(
              5.0 * descheduler:node:ideal_point_positive_distance:score,
              1.0
            )

        # Algorithm: Centroid Distance
        # Distance from cluster centroid (average point)
        - record: descheduler:node:centroid_distance:score
          expr: |-
            sqrt(
              (descheduler:node:cpu_usage:ratio - on() group_left() descheduler:cluster:cpu_usage:avg) ^ 2 +
              (descheduler:node:cpu_pressure:psi - on() group_left() descheduler:cluster:cpu_pressure:avg) ^ 2 +
              (descheduler:node:memory_usage:ratio - on() group_left() descheduler:cluster:memory_usage:avg) ^ 2 +
              (descheduler:node:memory_pressure:psi - on() group_left() descheduler:cluster:memory_pressure:avg) ^ 2
            )

    - name: descheduler.algorithms.rms
      interval: 15s
      rules:
        # Algorithm: Weighted RMS Positive Deviation
        # Root mean square of weighted positive deviations
        - record: descheduler:node:weighted_rms_positive_deviation:score
          expr: |-
            sqrt(
              (
                descheduler:node:cpu_usage:positive_deviation ^ 2 * 0.5 +
                descheduler:node:cpu_pressure:positive_deviation ^ 2 * 0.5 +
                descheduler:node:memory_usage:positive_deviation ^ 2 * 0.5 +
                descheduler:node:memory_pressure:positive_deviation ^ 2 * 0.5
              ) / 2
            )

        # Algorithm: Weighted Mean Square Positive Deviation
        # Mean square (without sqrt) of weighted positive deviations
        - record: descheduler:node:weighted_mean_square_positive_deviation:score
          expr: |-
            (
              descheduler:node:cpu_usage:positive_deviation ^ 2 * 0.5 +
              descheduler:node:cpu_pressure:positive_deviation ^ 2 * 0.5 +
              descheduler:node:memory_usage:positive_deviation ^ 2 * 0.5 +
              descheduler:node:memory_pressure:positive_deviation ^ 2 * 0.5
            ) / 2

    - name: descheduler.algorithms.linear
      interval: 15s
      rules:
        # Algorithm: Linear Weighted Positive Deviation
        # Linear sum of weighted positive deviations
        - record: descheduler:node:linear_weighted_positive_deviation:score
          expr: |-
            (
              descheduler:node:cpu_usage:positive_deviation * 0.5 +
              descheduler:node:cpu_pressure:positive_deviation * 0.5 +
              descheduler:node:memory_usage:positive_deviation * 0.5 +
              descheduler:node:memory_pressure:positive_deviation * 0.5
            ) / 2

    - name: descheduler.algorithms.advanced
      interval: 15s
      rules:
        # Algorithm: Critical Dimension Focus
        # Focuses on the metric with highest deviation
        - record: descheduler:node:critical_dimension_focus:score
          expr: |-
            max without (metric) (
              label_replace(descheduler:node:cpu_usage:positive_deviation, "metric", "cpu_usage", "", "") or
              label_replace(descheduler:node:cpu_pressure:positive_deviation, "metric", "cpu_pressure", "", "") or
              label_replace(descheduler:node:memory_usage:positive_deviation, "metric", "memory_usage", "", "") or
              label_replace(descheduler:node:memory_pressure:positive_deviation, "metric", "memory_pressure", "", "")
            )

        # Algorithm: Directional Centroid Distance
        # Like centroid distance but considers direction (all dimensions)
        - record: descheduler:node:directional_centroid_distance:score
          expr: |-
            (
              abs(descheduler:node:cpu_usage:ratio - on() group_left() descheduler:cluster:cpu_usage:avg) +
              abs(descheduler:node:cpu_pressure:psi - on() group_left() descheduler:cluster:cpu_pressure:avg) +
              abs(descheduler:node:memory_usage:ratio - on() group_left() descheduler:cluster:memory_usage:avg) +
              abs(descheduler:node:memory_pressure:psi - on() group_left() descheduler:cluster:memory_pressure:avg)
            ) / 4

        # Algorithm: Variance Minimization
        # Measures how far from balanced the node is (using variance)
        - record: descheduler:node:variance_minimization:score
          expr: |-
            sqrt(
              (
                (descheduler:node:cpu_usage:ratio - on() group_left() descheduler:cluster:cpu_usage:avg) ^ 2 +
                (descheduler:node:memory_usage:ratio - on() group_left() descheduler:cluster:memory_usage:avg) ^ 2
              ) / 2
            )

        # Algorithm: Directional Variance Minimization
        # Variance minimization with all 4 dimensions
        - record: descheduler:node:directional_variance_minimization:score
          expr: |-
            sqrt(
              (descheduler:node:cpu_usage:ratio - on() group_left() descheduler:cluster:cpu_usage:avg) ^ 2 +
              (descheduler:node:cpu_pressure:psi - on() group_left() descheduler:cluster:cpu_pressure:avg) ^ 2 +
              (descheduler:node:memory_usage:ratio - on() group_left() descheduler:cluster:memory_usage:avg) ^ 2 +
              (descheduler:node:memory_pressure:psi - on() group_left() descheduler:cluster:memory_pressure:avg) ^ 2
            ) / 2

    - name: descheduler.algorithms.meta
      interval: 15s
      rules:
        # Algorithm: Pareto Front (NSGA-II) - Simplified for Prometheus
        # Uses sum of ranks across objectives (cannot do true NSGA-II sorting in PromQL)
        # Lower is better - nodes with lower combined rank across dimensions
        - record: descheduler:node:pareto_front:score
          expr: |-
            (
              descheduler:node:cpu_usage:ratio +
              descheduler:node:cpu_pressure:psi +
              descheduler:node:memory_usage:ratio +
              descheduler:node:memory_pressure:psi
            ) / 4

    # Cluster-wide aggregations (useful for monitoring)
    - name: descheduler.cluster.stats
      interval: 30s
      rules:
        # Total VM count
        - record: cluster:vms:total
          expr: sum(node_vm_count)

        # Nodes by usage category (rough classification)
        - record: cluster:nodes:low_usage
          expr: count(descheduler:node:cpu_usage:ratio < 0.3 and descheduler:node:memory_usage:ratio < 0.3)

        - record: cluster:nodes:medium_usage
          expr: count(descheduler:node:cpu_usage:ratio >= 0.3 and descheduler:node:cpu_usage:ratio < 0.7 and descheduler:node:memory_usage:ratio >= 0.3 and descheduler:node:memory_usage:ratio < 0.7)

        - record: cluster:nodes:high_usage
          expr: count(descheduler:node:cpu_usage:ratio >= 0.7 or descheduler:node:memory_usage:ratio >= 0.7)

    # Alert rules (optional - for monitoring the simulation)
    - name: descheduler.alerts
      interval: 15s
      rules:
        - alert: NodeHighPressure
          expr: descheduler:node:cpu_pressure:psi > 0.8 or descheduler:node:memory_pressure:psi > 0.8
          for: 1m
          labels:
            severity: warning
          annotations:
            summary: "Node {{ $labels.node }} has high resource pressure"
            description: "Node {{ $labels.node }} has CPU pressure {{ $value | humanize }} or memory pressure above 0.8"

        - alert: NodeOverloaded
          expr: descheduler:node:cpu_usage:ratio > 1.0
          for: 30s
          labels:
            severity: critical
          annotations:
            summary: "Node {{ $labels.node }} is overloaded"
            description: "Node {{ $labels.node }} has CPU usage {{ $value | humanize }} exceeding 100%"

        - alert: NodeMemoryExhausted
          expr: descheduler:node:memory_usage:ratio > 0.95
          for: 1m
          labels:
            severity: critical
          annotations:
            summary: "Node {{ $labels.node }} is nearly out of memory"
            description: "Node {{ $labels.node }} has memory usage {{ $value | humanizePercentage }} (>95%)"

        - alert: ClusterImbalanced
          expr: descheduler:cluster:cpu_usage:stddev > 0.3 or descheduler:cluster:memory_usage:stddev > 0.3
          for: 2m
          labels:
            severity: info
          annotations:
            summary: "Cluster resource distribution is imbalanced"
            description: "Standard deviation of CPU or memory usage across nodes exceeds 0.3"